#!/usr/bin/env python3

import socket
import sys
import os

'''
This function connects a socket to the FTP server using the hostname and port given by the user.
'''


def connect_ftp(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
    return sock


"""
This function collects and returns responses from the FTP server over the control channel
"""


def get_ftp_response(sock):
    sock.settimeout(10)
    try:
        response = ''
        while "\r\n" not in response:
            message = sock.recv(1024)
            response += message.decode()

        return response
    except TimeoutError:
        print("No response from server!")


'''
Does the log in using the USER and PASS commands. Uses the users input for password and username
'''


def do_login(control_channel, username, password):
    try:
        control_channel.sendall(("USER " + username + "\r\n").encode())
        res = get_ftp_response(control_channel)
        if res[0] == '3':
            control_channel.sendall(("PASS " + password + "\r\n").encode())
            res2 = get_ftp_response(control_channel)
            if res2[0] == '2':
                return True
    except:
        print("Could not login, try again!")


'''
Sets the control channel socket to file transfer mode. Uses TYPE, MODE and STRU to communicate with the FTP server.
'''


def set_transfer_mode(control_channel):
    msg = "TYPE I\r\n"
    control_channel.send(msg.encode())
    get_ftp_response(control_channel)

    msg = "MODE S\r\n"
    control_channel.send(msg.encode())
    get_ftp_response(control_channel)

    msg = "STRU F\r\n"
    control_channel.send(msg.encode())
    get_ftp_response(control_channel)


'''
Puts the control channel into passive mode, and returns information about the port and ip address
'''


def get_passive_mode(control_channel):
    msg = "PASV\r\n"
    control_channel.send(msg.encode())
    response = get_ftp_response(control_channel)
    response = response.split(" ")
    port, ip, code = get_pasv_port_ip(response)
    return port, ip, code


'''
Helper function, responsible for parsing the servers response to a PASV request
'''


def get_pasv_port_ip(response):
    code = response[0]
    path = response[4].replace('.\r\n', '').replace("(", '').replace(")", "").split(",")
    port_string = "(" + path[4] + "<<" + "8)" + "+" + path[5]
    port = eval(port_string)
    ip_address = path[0] + "." + path[1] + "." + path[2] + "." + path[3]
    return port, ip_address, code


'''
Helper function that verifies if a command is valid. Used to clean user input
'''


def check_valid_operation(operation):
    check = ['ls', 'mkdir', 'rm', 'rmdir', 'cp', 'mv']
    if operation in check:
        return True
    else:
        print("Invalid command!\n")
        return False


'''
This function is responsible for pasrsing FTP URLS passed by the user on the command line. 

It uses a combination of splitting and string manipulation to gather important data.

It takes the modified sys.argv array and manipulates it to get the data.

'''


def get_all_info(info):
    response = {'operation': 0, 'param1': 0, 'param2': 0, 'host': 0, 'username': 0, 'password': 0}

    if check_valid_operation(info[0]):  # ensures the command entered by the user is valid
        response['operation'] = info[0]  # setting the first argument as the command since it is valid.

        # Focuses on two parameter input, mainly for commands such as mkdir, rmdir, rm
        if len(info) == 2:
            removed_fttp = info[1].replace('ftp://', '')

            string_data = removed_fttp.split(":")
            response['username'] = string_data[0]

            pass_and_host = string_data[1].split('@')
            response['password'] = pass_and_host[0]
            response['host'] = pass_and_host[1]

            port_and_path = string_data[2].split('/')

            response['port'] = port_and_path.pop(0)

            path = "/"  # make sure the path points to the root directory.
            for each in port_and_path:  # constructing the path from the data, after breaking it down via split.
                if path == "/":
                    path += each
                else:
                    path += '/' + each

            response['param1'] = [1, path]
            return response

        # Deals with 3 parameter input, for commands such as ls, cp, mv
        elif len(info) == 3:
            try:
                removed_fttp = info[1].replace('ftp://', '')

                string_data = removed_fttp.split(":")
                response['username'] = string_data[0]

                pass_and_host = string_data[1].split('@')
                response['password'] = pass_and_host[0]
                response['host'] = pass_and_host[1]

                port_and_path = string_data[2].split('/')

                response['port'] = port_and_path.pop(0)

                path = "/"
                for each in port_and_path:
                    if path == "":
                        path += each
                    else:
                        path += '/' + each
                response['param1'] = [1, path]  # 1 denotes that the remote arg was passed first

                response['param2'] = [2, info[2]]  # 2 denotes tha the local arg was passed second
                return response

            # The except clause accounts for the difference in the order of arguments.
            # In this section, we deal with the situation where the local arg precedes the remote arg
            # This helps orient the program for the mv and cp functions specifically
            except:
                removed_fttp = info[2].replace('ftp://', '')

                string_data = removed_fttp.split(":")
                response['username'] = string_data[0]

                pass_and_host = string_data[1].split('@')
                response['password'] = pass_and_host[0]
                response['host'] = pass_and_host[1]

                port_and_path = string_data[2].split('/')

                response['port'] = port_and_path.pop(0)

                path = ""
                for each in port_and_path:
                    if path == "":
                        path += each
                    else:
                        path += '/' + each
                response['param1'] = [2, path]  # 2 denotes that the remote arg was passed second

                response['param2'] = [1, info[1]]  # 1 denotes tha the local arg was passed first
                return response
    else:
        print('Remote files and directories should be listed as: ftp://[USER[:PASSWORD]@]HOST[:PORT]/PATH\n')


'''
Creates a directory using the MKD command to the FTP server
'''


def make_directory(control_channel, parsed_input):
    msg = "MKD {}\r\n".format(parsed_input['param1'][1])
    control_channel.send(msg.encode())
    print(get_ftp_response(control_channel))


'''
Removes a directory using the RMD command to the FTP server
'''


def remove_directory(control_channel, parsed_input):
    msg = "RMD {}\r\n".format(parsed_input['param1'][1])
    control_channel.send(msg.encode())
    print(get_ftp_response(control_channel))


'''
Used to exit out of the server and close the socket after the request has been processed.
'''


def quit_command(control_channel):
    msg = 'QUIT\r\n'
    control_channel.send(msg.encode())
    get_ftp_response(control_channel)
    control_channel.close()
    sys.exit()


'''
Responsible for the ls command. Sends the LIST command to the FTP server, gathers the response and prints it to the 
command line.

'''


def list_command(control_channel, parsed_input):
    if parsed_input['param1'][1] == 0 or parsed_input['param1'][1] == "":
        print("Please give a URL to list the directory from. Try again\n")
        return

    port, ip, code = get_passive_mode(control_channel)
    if code[0] == "2":
        set_transfer_mode(control_channel)
        data_channel = connect_ftp(ip, port)
        data_channel.settimeout(5)
        msg = "LIST {}\r\n".format(parsed_input['param1'][1])
        control_channel.send(msg.encode())
        get_ftp_response(control_channel)
        res = data_channel.recv(5000)
        print(get_ftp_response(control_channel))
        if res == b'':
            print("--No files in the given directory--\n")
        else:
            print(res)

    else:
        print("Could not open data channel")


'''
This function focuses on all flow of bytes going from the FTP server to the local machine.

It does so by sending the RETR command to the FTP server, opening a file on the local machine and then reading 
the bytes and writing to the file.

Used in the cp and mv commands based on the ordering of arguments.

'''


def download_command(control_channel, parsed_input):
    if parsed_input['param1'][1] == 0 or parsed_input['param2'][1] == 0 \
            or parsed_input['param1'] == "" or parsed_input['param2'] == "":  # Error check to make sure we have args
        print("Please give the local and remote URL for download to work. Try again\n")
        return

    if (parsed_input['host'] != 0 or parsed_input['host'] != "") and (
            parsed_input['host'] not in parsed_input['param2'][1] or parsed_input['password'] not in parsed_input[
        'param2'][1]):  # Error check to make sure one file is remote and the other is local

        port, ip, code = get_passive_mode(control_channel)  # Getting the port, ip and code for the PASV channel
        if code[0] == "2":
            set_transfer_mode(control_channel)
            data_channel = connect_ftp(ip, port)
            path_to_file = parsed_input['param1'][1]
            path_level = path_to_file.split("/")
            msg = "RETR {}\r\n".format(path_to_file)
            file_name = path_level[len(path_level) - 1]
            control_channel.send(msg.encode())
            response = get_ftp_response(control_channel)
            if response[0] == "1":
                try:
                    # Calculates how many bytes the server is sending based on it's response
                    bytes_buffer = int(response[response.find("(") + 1: response.find(")")].replace(" bytes", ""))
                except:
                    print("Could not calculate total number of bytes being sent, try again")
                    return
                with open(parsed_input['param2'][1], "wb") as file:
                    while bytes_buffer != 0:
                        response1 = data_channel.recv(1)
                        file.write(response1)
                        bytes_buffer -= 1
                    file.close()
                    data_channel.close()
                    print(get_ftp_response(control_channel))


'''
This function focuses on all flow of bytes going from the local machine to the FTP server.

It does so by sending the STOR command to the FTP server, opening a file on the local machine and then reading 
the bytes on the said file and sending them to the FTP server via the data channel.

Used in the cp and mv commands based on the ordering of arguments.

'''


def upload_command(control_channel, parsed_input):
    if parsed_input['param1'][1] == 0 or parsed_input['param2'][1] == 0 \
            or parsed_input['param1'] == "" or parsed_input['param2'] == "":
        print("Please give the remote and local URL for upload to work. Try again\n")
        return
    if (parsed_input['host'] != 0 or parsed_input['host'] != "") and (
            parsed_input['host'] not in parsed_input['param2'][1] or parsed_input['password'] not in parsed_input[
        'param2'][1]):  # Error check to make sure one file is remote and the other is local

        port, ip, code = get_passive_mode(control_channel)
        if code[0] == "2":
            set_transfer_mode(control_channel)
            data_channel = connect_ftp(ip, port)
            path_to_file = parsed_input['param1'][1]
            path_level = path_to_file.split("/")
            file_name = path_level[len(path_level) - 1]
            msg = "STOR {}\r\n".format(path_to_file)
            control_channel.send(msg.encode())
            response = get_ftp_response(control_channel)
            if response[0] == "1":
                with open(parsed_input["param2"][1], "rb") as file:
                    while True:
                        byte1 = file.read(1)  # Ensures bit to bit integrity of the transfer
                        if byte1:
                            data_channel.sendall(byte1)
                        else:
                            break
                    # while bytes != file.read(1):
                    #     data_channel.sendall(bytes1)
                file.close()
                data_channel.close()
                print(get_ftp_response(control_channel))
                print("File: " + file_name + " has been uploaded to the server")
    else:
        print("Please make sure one file is local and one remote for the upload to happen! \n")


'''
Responsible for sending the rm command to the FTP server and removing a file
'''


def delete_command(sock, parsed_input):
    if parsed_input['param1'] == 0:
        print("Please give a URL to delete the file from. Try again\n")
        return

    port, ip, code = get_passive_mode(sock)
    if code[0] == '2':
        set_transfer_mode(sock)
        data_channel = connect_ftp(ip, port)
        msg = "DELE {}\r\n".format(parsed_input['param1'][1])
        sock.send(msg.encode())
        print(get_ftp_response(sock))
        data_channel.close()


'''
Assists in moving a local file to the FTP server by removing the local instance after the transfer has been successful
'''


def move_local_file(parsed_data):
    path_to_file = parsed_data['param2'][1]
    try:
        if os.path.exists(path_to_file):
            os.remove(path_to_file)
    except:
        print("File could not be removed locally")


def main():
    if len(sys.argv) < 2 or len(sys.argv) > 4:
        print("Check usage:\n .5700ftp COMMAND <arg1> <arg2 optional>")
    sys.argv.remove('./5700ftp')
    parsed_data = get_all_info(sys.argv)

    sock = connect_ftp(parsed_data['host'], int(parsed_data['port']))
    get_ftp_response(sock)
    logged_in = do_login(sock, parsed_data['username'], parsed_data['password'])

    if parsed_data:
        if parsed_data['operation'] == 'mv':
            if parsed_data['param1'][0] == 1:
                download_command(sock, parsed_data)
                delete_command(sock, parsed_data)
                quit_command(sock)
            elif parsed_data['param1'][0] == 2:
                upload_command(sock, parsed_data)
                move_local_file(parsed_data)
                quit_command(sock)
        elif parsed_data['operation'] == 'ls':
            list_command(sock, parsed_data)
            quit_command(sock)
        elif parsed_data['operation'] == 'cp':
            if parsed_data['param1'][0] == 1:
                download_command(sock, parsed_data)
                quit_command(sock)
            elif parsed_data['param1'][0] == 2:
                upload_command(sock, parsed_data)
                quit_command(sock)
        elif parsed_data['operation'] == 'rm':
            delete_command(sock, parsed_data)
            quit_command(sock)
        elif parsed_data['operation'] == 'mkdir':
            make_directory(sock, parsed_data)
            quit_command(sock)
        elif parsed_data['operation'] == 'rmdir':
            remove_directory(sock, parsed_data)
            quit_command(sock)


main()
